"use strict";
/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses
 * constant NoopMetrics for all of its methods.
 */
class NoopMeter {
    constructor() { }
    /**
     * Returns constant noop measure.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createMeasure(name, options) {
        return exports.NOOP_MEASURE_METRIC;
    }
    /**
     * Returns a constant noop counter.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createCounter(name, options) {
        return exports.NOOP_COUNTER_METRIC;
    }
    /**
     * Returns constant noop observer.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createObserver(name, options) {
        return exports.NOOP_OBSERVER_METRIC;
    }
    labels(labels) {
        return exports.NOOP_LABEL_SET;
    }
}
exports.NoopMeter = NoopMeter;
class NoopMetric {
    constructor(instrument) {
        this._instrument = instrument;
    }
    /**
     * Returns a Bound Instrument associated with specified LabelSet.
     * It is recommended to keep a reference to the Bound Instrument instead of
     * always calling this method for every operations.
     * @param labels the canonicalized LabelSet used to associate with this
     *     metric instrument.
     */
    bind(labels) {
        return this._instrument;
    }
    /**
     * Returns a Bound Instrument for a metric with all labels not set.
     */
    getDefaultBound() {
        return this._instrument;
    }
    /**
     * Removes the Binding from the metric, if it is present.
     * @param labels the canonicalized LabelSet used to associate with this
     *     metric instrument.
     */
    unbind(labels) {
        return;
    }
    /**
     * Clears all timeseries from the Metric.
     */
    clear() {
        return;
    }
    setCallback(fn) {
        return;
    }
}
exports.NoopMetric = NoopMetric;
class NoopCounterMetric extends NoopMetric {
    add(value, labelSet) {
        this.bind(labelSet).add(value);
    }
}
exports.NoopCounterMetric = NoopCounterMetric;
class NoopMeasureMetric extends NoopMetric {
    record(value, labelSet, correlationContext, spanContext) {
        if (typeof correlationContext === 'undefined') {
            this.bind(labelSet).record(value);
        }
        else if (typeof spanContext === 'undefined') {
            this.bind(labelSet).record(value, correlationContext);
        }
        else {
            this.bind(labelSet).record(value, correlationContext, spanContext);
        }
    }
}
exports.NoopMeasureMetric = NoopMeasureMetric;
class NoopObserverMetric extends NoopMetric {
    setCallback(callback) { }
}
exports.NoopObserverMetric = NoopObserverMetric;
class NoopBoundCounter {
    add(value) {
        return;
    }
}
exports.NoopBoundCounter = NoopBoundCounter;
class NoopBoundMeasure {
    record(value, correlationContext, spanContext) {
        return;
    }
}
exports.NoopBoundMeasure = NoopBoundMeasure;
class NoopBoundObserver {
    setCallback(callback) { }
}
exports.NoopBoundObserver = NoopBoundObserver;
exports.NOOP_METER = new NoopMeter();
exports.NOOP_BOUND_COUNTER = new NoopBoundCounter();
exports.NOOP_COUNTER_METRIC = new NoopCounterMetric(exports.NOOP_BOUND_COUNTER);
exports.NOOP_BOUND_MEASURE = new NoopBoundMeasure();
exports.NOOP_MEASURE_METRIC = new NoopMeasureMetric(exports.NOOP_BOUND_MEASURE);
exports.NOOP_BOUND_OBSERVER = new NoopBoundObserver();
exports.NOOP_OBSERVER_METRIC = new NoopObserverMetric(exports.NOOP_BOUND_OBSERVER);
exports.NOOP_LABEL_SET = {};
//# sourceMappingURL=NoopMeter.js.map